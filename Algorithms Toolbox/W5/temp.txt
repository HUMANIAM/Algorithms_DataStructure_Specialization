#include <iostream>
#include <cassert>
#include <string>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <limits>
using namespace std;

long long eval(long long a, long long b, char op) {
  if (op == '*') {
    return a * b;
  } else if (op == '+') {
    return a + b;
  } else if (op == '-') {
    return a - b;
  } else {
    assert(0);
  }
}

long long get_maximum_value(const string &exp) {
  //write your code here
  vector<vector<long long> >maxvals(exp.size(), vector<long long>(exp.size()) );
  vector<vector<long long> >minvals(exp.size(), vector<long long>(exp.size()) );
  for(int i=0; i<exp.size(); i += 2)
    maxvals[i][i] = minvals[i][i] = exp[i] - '0';

  int gap = 2;
  while(gap < exp.size()){
    for(int i=0; i < exp.size()-gap ; i += 2){
        int j = i+gap;
        maxvals[i][j] = numeric_limits<long long>::min();
        minvals[i][j] = numeric_limits<long long>::max();
        for(int k=i; k<j; k +=2)
        {
            long long a = eval(maxvals[i][k], maxvals[k+2][j], exp[k+1]);
            long long b = eval(minvals[i][k], maxvals[k+2][j], exp[k+1]);
            long long c = eval(maxvals[i][k], minvals[k+2][j], exp[k+1]);
            long long d = eval(minvals[i][k], minvals[k+2][j], exp[k+1]);
            maxvals[i][j] = max ( maxvals[i][j] , max( max(c,d), max(a,b)) );
            minvals[i][j] = min ( minvals[i][j] , min( min(c,d), min(a,b)) );
        }
    }
     gap += 2;
  }
  return maxvals[0][exp.size()-1];
}


int main() {

  string s;
  std::cin >> s;
  std::cout << get_maximum_value(s) << '\n';
}



